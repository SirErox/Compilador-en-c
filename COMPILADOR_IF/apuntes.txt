/*
fecha de entrega del programa es la misma del ordinario, del 22 en 13 dias
if
file *fpi, *fpo
fpi es el archivo compilado.cad
fpo es el archivo asmm de salida compilado.asm


lo siguiente se le pasa al buffer para que lo ejecute en partes, ya que solo se genera si no se encuentran errores

"nasm -f elf64 compilado.asm"
"ld compilado.o -o compilado"
"compilado"
system(buffer)
execvp(buffer)

*/

/*

programa de ejemplo no completo
el programa tiene que traducir del codigo .c a codigo maquina(asm) y que sea compilable
section .data
    cad tmp "hola"
    

mov ecx, 10
mov edx, 10
ciclo1:
 ciclo2:
    mov eax, 4

objdump -S programa 
*/


void traduce_ifs(FILE *archivo_entrada, FILE *archivo_salida) {
    char linea[1024];
    int condicion = 0;

    while (fgets(linea, sizeof(linea), archivo_entrada)!= NULL) {
        if (strstr(linea, "if")!= NULL) {
            // Aquí puedes agregar el código para traducir la sentencia if a lenguaje ensamblador
            fprintf(archivo_salida, "Se encontro una sentencia if en la linea: %s", linea);
            condicion = 1;
        } else if (strstr(linea, "else")!= NULL) {
            // Aquí puedes agregar el código para traducir la sentencia else a lenguaje ensamblador
            fprintf(archivo_salida, "Se encontro una sentencia else en la linea: %s", linea);
            condicion = 0;
        } else if (condicion == 1) {
            // Aquí puedes agregar el código para traducir el código dentro del if a lenguaje ensamblador
            fprintf(archivo_salida, "Se encontro código dentro del if en la linea: %s", linea);
        }
        traduce_ifs(archivo_entrada, archivo_salida);
    }
}